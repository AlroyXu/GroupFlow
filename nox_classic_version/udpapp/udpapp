#!/usr/bin/env python

"""
    UdpApp python script
        Server send udp packets every NSECONDS
        Client listening the UDP_PORT
        [Copy to your /usr/bin directory for call in shell]

@author: arthurgodoy
"""
import sys
import socket
#import os
import uuid
from time import time, sleep

UDP_PORT=8885 #Port Listening/Sending

NSECONDS=0.030 #Send Period

MULTICAST_IP = "10.0.2.254"
MULTICAST_MAC = "ca:fe:ca:fe:ca:fe"
OUTPUT_DIR = "/home/openflow/logs/"

def udpserver( IPs, PORT ):
    SRC_UUID = str(uuid.uuid4()) #Get a UUID for this server
    PKT_LONG = long(0) #Start a packet counter
    print "SRC UUID:", SRC_UUID
    print "UDP target IP:", IPs
    print "UDP target port:", UDP_PORT
    print "Sending interval:", NSECONDS, " seconds"

    sock = socket.socket( socket.AF_INET,        # Internet
                          socket.SOCK_DGRAM )    # UDP

    #Send each NSECONDS for each client
    while True:
        for UDP_IP in IPs:
            sock.sendto( SRC_UUID + ";" + str( PKT_LONG ) + ";" + repr( time() ), ## SOURCE;PACKET_ID;SENDED
                         (UDP_IP, UDP_PORT) )
        
        PKT_LONG += 1
        sleep( NSECONDS )


#Register the multicast ip and mac on the arp table.
#os.system('arp -s ' + MULTICAST_IP + ' ' + MULTICAST_MAC)

#Arguments should be 2 or more
if len( sys.argv ) < 2:
    print " "
    print "Usage ="
    print "      Server:"
    print "              Unicast=    -s CLIENT_IP1 CLIENT_IP2 CLIENT_IPN"
    print "              Multicast=  -m"
    print "      Client:"
    print "              -c"
    print " "

#Server
elif sys.argv[1] == "-s":
    UDP_CLIENTS=sys.argv[2:] #Get the arguments starting from the third
    udpserver( UDP_CLIENTS, UDP_PORT )
    
#Client
elif sys.argv[1] == "-c":
    HOST_NAME = ""
    if len(sys.argv) >= 3:
        HOST_NAME=sys.argv[2]     #Third argument it's the binding IP

    UDP_IP = ""
    
    sock = socket.socket( socket.AF_INET,     # Internet
                          socket.SOCK_DGRAM ) # UDP
    sock.bind( (UDP_IP,UDP_PORT) )
    
    uuidstr = HOST_NAME + '---' + str(uuid.uuid4())
    myfile = open(OUTPUT_DIR + uuidstr + ".log", 'w')
    
    header = "SOURCE;PACKET_ID;SENDED;RECEIVED;"
    print header
    myfile.write( header + '\n' )
    myfile.flush()
    while True:
        data, addr = sock.recvfrom( 1024 )   # buffer size is 1024 bytes
        mystr = data + ";" + repr( time() )
        print str
        myfile.write(mystr + '\n')
        myfile.flush()
        
elif sys.argv[1] == "-m":
    udpserver( [ MULTICAST_IP ], UDP_PORT )

#Oops...
else:
    print "Oops..Something bad happened, check your arguments!"